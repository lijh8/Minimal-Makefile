# Makefile

# 1. Generating prerequisites automatically for header files
# 2. Compile source files automatically in current directory

# .
# ├── f1.c
# ├── f1.h
# │── f2.c
# │── f2.h
# ├── main.c
# ├── Makefile
# └── print_log.h

# build dynamic library with -fPIC -shared
CFLAGS   := -g # -O3 -fPIC # CXXFLAGS for .cpp
CPPFLAGS := -MMD -MP # -I../foo -DNDEBUG
LDFLAGS  := # -L../foo -shared -static
LDLIBS   := # -lfoo
#CC      := $(CXX) # link with CXX for .cpp

# target name is basename of one of the source files
main: $(patsubst %.c,%.o,$(wildcard *.c)) # .cpp
-include $(patsubst %.c,%.d,$(wildcard *.c)) # .cpp
clean: ; $(RM) *.o *.d main
.PHONY: clean

#

#CFLAGS += -std=c99 -Wall -Wextra -Wpedantic # CXXFLAGS for .cpp

#

# fully static link archive with -static
ARFLAGS := rvU
(%): % ;
%.a: ; $(AR) $(ARFLAGS) $@ $?
libfoo.a: libfoo.a($(patsubst %.c,%.o,$(wildcard *.c))) # .cpp

# do not delete intermediate .o files even when make runs for the first time
.SECONDARY: # $(patsubst %.c,%.o,$(wildcard *.c))


#


# timestamp is kept with the U option, or timestamp is reset to 1970/1/1.
# ARFLAGS := rvU
# $ ar -tv libfoo.a
# rw-rw-r-- 1000/1000 78776 Jan 1 23:49 2025 foo.o
# $
#


# in the traditional way, the object .o files are direct prerequisites:
#   libfoo.a : bar.o foo.o # yes it works, but it is not the implicit rule for archive.
#
# in the archive(member) syntax, the .o files are not direct dependencies:
#   libfoo.a : libfoo.a(foo.o bar.o) # archive(member) syntax if implicit rule for archive.
#
# so when make runs for the first time, the .o files will be deleted.
# now the libfoo.a exists, the second time make runs,
# the .o files are referenced like libfoo.a(foo.o), so the .o files are kept.
# with ` .SECONDARY: ` the .o files will not be deleted even for the first time.


# gcc manual, 3.13 Options Controlling the Preprocessor:
#
# 1. -M, generates dependencies for all header files, outputs to stdout;
# 2. -MM, generates dependencies for user header files, omits system headers;
# 3. -MD, generates dependencies to `.d` files;
# 4. -MMD, generates dependencies for user header to `.d` files;
#
# 5. -MP, it adds a rule without prerequisites for the header.
#         when header is deleted but the `#include` directive remains in source code,
#         this makes the object file depends on a rule or target instead of a deleted file.
#         to suppress the error in make and brings the error to the `#include` directive in source code.
#
#     test.o: test.c test.h
#     test.h:


# use clang for C program:
#CC       := clang

# libstdc++ for g++, libc++ for clang++,
# $ apt install clang llvm lldb libc++-dev libc++abi-dev
# use clang++ for C++ program: link to libc++ instead of libstdc++,
#CC       := $(CXX) # link with CXX for .cpp
#CXX      := clang++
#CXXFLAGS += -stdlib=libc++
#LDFLAGS  += -stdlib=libc++

#

# https://github.com/google/sanitizers/issues/1039#issuecomment-453607726 ,
#   "asan+lsan+ubsan is fine, the rest should run separately."  --kcc, Jan 12, 2019

# address (including leak), undefined behavior sanitizers,
CFLAGS   += -fsanitize=address -fsanitize=undefined -fsanitize=leak # CXXFLAGS for .cpp
LDFLAGS  += -fsanitize=address -fsanitize=undefined -fsanitize=leak # CXXFLAGS for .cpp

# thread sanitizer,
#CFLAGS  += -fsanitize=thread # CXXFLAGS for .cpp
#LDFLAGS += -fsanitize=thread

# https://github.com/google/sanitizers/issues/1039#issuecomment-453306241 ,
#   "GCC doesn't have msan at all."  --kcc, Jan 11, 2019

# memory sanitizer, (gcc has no msan. use clang, clang++, if needed)
#CFLAGS  += -fsanitize=memory -fPIE # CXXFLAGS for .cpp
#LDFLAGS += -fsanitize=memory -pie

#
