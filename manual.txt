https://www.gnu.org/software/make/manual/make.pdf
January 2020


2.5 Letting make Deduce the Recipes
It is not necessary to spell out the recipes for compiling the individual C
source files, because make can figure them out: it has an implicit rule for
updating a ‘.o’ file from a correspondingly named ‘.c’ file using a ‘cc -c’
command.


4.3.3 The Function wildcard
a makefile to compile all C source files in the directory and then link them
together could be written as follows:

    objects := $(patsubst %.c,%.o,$(wildcard *.c))
    foo : $(objects)
        cc -o foo $(objects)

(This takes advantage of the implicit rule for compiling C programs, so there is
no need to write explicit rules for compiling the files)


4.13 Generating Prerequisites Automatically
use the ‘-MM’ flag


10 Using Implicit Rules
The built-in implicit rules use several variables in their recipes so
that, by changing the values of the variables, you can change the way
the implicit rule works. For example, the variable CFLAGS controls the
flags given to the C compiler by the implicit rule for C compilation.


10.1 Using Implicit Rules
To allow make to find a customary method for updating a target file, all you
have to do is refrain from specifying recipes yourself. Either write a rule with
no recipe, or don’t write a rule at all. Then make will figure out which
implicit rule to use based on which kind of source file exists or can be made.
For example, suppose the makefile looks like this:

    foo : foo.o bar.o
        cc -o foo foo.o bar.o $(CFLAGS) $(LDFLAGS)

Because you mention foo.o but do not give a rule for it, make will automatically
look for an implicit rule that tells how to update it. This happens whether or
not the file foo.o currently exists.


10.2 Catalogue of Built-In Rules
Compiling C programs:
    $(CC) $(CPPFLAGS) $(CFLAGS) -c

Compiling C++ programs:
    $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c

Linking a single object file:
    $(CC) $(LDFLAGS) n.o $(LOADLIBES) $(LDLIBS)

(if there are multiple object files, one of which has a name matching that of
the executable file)


10.5.2 Pattern Rule Examples
Here are some examples of pattern rules actually predefined in make.
First, the rule that compiles ‘.c’ files into ‘.o’ files:

    %.o : %.c
        $(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@

defines a rule that can make any file x.o from x.c. The recipe uses the
automatic variables ‘$@’ and ‘$<’ to substitute the names of the target
file and the source file in each case where the rule applies


---


https://www.gnu.org/software/make/

A rule in the makefile tells Make how to execute a series of commands in order
to build a target file from source files. It also specifies a list of
dependencies of the target file. This list should include all files (whether
source files or other targets) which are used as inputs to the commands in the
rule.

  target: dependencies ...
    commands
    ...

If a target file is newer than all of its dependencies, then it is already up to
date, and it does not need to be regenerated. The other target files do need to
be updated, but in the right order: each target file must be regenerated before
it is used in regenerating other targets.


---


https://www.gnu.org/software/make/manual/make.html

The make program uses the makefile data base and the last-modification times of
the files to decide which of the files need to be updated. For each of those
files, it issues the recipes recorded in the data base.


---


Example 1:

# an empty makefile

$ cat Makefile
$
$ make x  # goal name is basename of the source file
cc x.c -o x
$

Example 2:

# a rule without prerequisites and recipes, which just mentions the target

$ cat Makefile
x:  # target name is basename of the source file
$
$ make
cc x.c -o x
$

Example 3:

$ cat Makefile
x: x.o
$
$ make
cc -c -o x.o x.c
cc x.o -o x
$

Example 4:

$ cat Makefile
x: y.o z.o  # no mentioning x.o
$
$ make
cc -c -o y.o y.c
cc -c -o z.o z.c
cc x.c y.o z.o -o x
$

Example 5:

$ cat Makefile
x: y.o z.o x.o
$
$ make
cc -c -o x.o x.c
cc -c -o y.o y.c
cc -c -o z.o z.c
cc x.o y.o z.o -o x
$


---


# recursive expansion happens when the variable is substituted / used.

x = foo
y = $(x) bar
x = later

all: ; @echo $(x), $(y)   # expansion of y happens when it is used here

$ make -f a.mk
later, later bar
$


# simple expansion happens when the variable is defined.

x := foo
y := $(x) bar            # expansion of y happens when it is defined here
x := later

all: ; @echo $(x), $(y)

$ make -f a.mk
later, foo bar
$


---


# https://www.gnu.org/software/make/manual/make.html#Special-Variables ,
# make manual: 6.14,
# it works with both recursive and simple variable expansion .

.RECIPEPREFIX = >
all:
> @echo Hello, world

# replace tab with space for recipe prefix.
# recipe then can be indented by one or more spaces.
# $(subst ,, ) # this replaces nothing with nothing, so the space remains.
#
# this works only with simple variable expansion. it is inconsistent with 6.14.
# so do not do this.

.RECIPEPREFIX = $(subst ,, )    # err: recursive expansion will not work.
.RECIPEPREFIX := $(subst ,, )   # ok: simple expansion works.

all:
   @echo "|$(.RECIPEPREFIX)|"   # it should happen before enter recipe


---


# https://www.gnu.org/software/make/manual/html_node/Automatic-Prerequisites.html ,
# 4.14 Generating Prerequisites Automatically


%.d: %.c
    @set -e; rm -f $@; \
        $(CC) -M $(CPPFLAGS) $< > $@.$$$$; \
        sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
        rm -f $@.$$$$


# 1.
#
# the `.d` dependency file depends on `.c` source file
# as stated in makefile with rule ` %.d: %.c `.
#
# the sed command puts the `.d` file in the target of both `.c` and `.h` files.
# this makes `.d` file depend on `.h` files too.
# it will regenerate the `.d` file even when the header file is changed.
#
# main.o        : main.c defs.h
# main.o main.d : main.c defs.h


# 2.
# https://lists.gnu.org/archive/html/help-make/2025-05/msg00001.html ,

Paul Smith:
this is an old-fashioned and no longer recommended way to handle prerequisite tracking.

I recommend you do not try to use this method for tracking header file
prerequisites.  Instead, look at this method:
  https://make.mad-scientist.net/papers/advanced-auto-dependency-generation/ ,
  ` CPPFLAGS += -MMD -MP `


-include $(sources:.c=.d)                    # ok
-include $(patsubst %.c,%.d,$(wildcard *.c)) # ok
-include $(wildcard *.d)                     # no, do not use wildcard directly
-include *.d                                 # no, do not use wildcard directly


# 3.
# https://lists.gnu.org/archive/html/help-make/2025-05/msg00001.html ,

Q: when do `make clean` twice, why it triggers the rule for `.d` files?

A:
Paul Smith:
Make always tries to rebuild all its included files.  See:
  https://www.gnu.org/software/make/manual/html_node/Remaking-Makefiles.html ,


3.5 How Makefiles Are Remade:
To this end, after reading in all makefiles make will consider each as a goal target,

3.3 Including Other Makefiles:
If an included makefile cannot be found in any of these directories it is not an
immediately fatal error; processing of the makefile containing the include continues.
Once it has finished reading makefiles,
make will try to remake any that are out of date or don’t exist.


---


# 7.2 Syntax of Conditionals:
# Extra spaces are allowed and ignored at the beginning of
# the conditional directive line, but a tab is not allowed.

ifdef NDEBUG
CPPFLAGS += -DNDEBUG
CFLAGS += -O3
else
CFLAGS += -g
endif


$ cat Makefile
# do not indent with tab or .RECIPEPREFIX for conditions

ifneq ($(flavor foo),undefined)
bar := 123
endif

test:
	@echo "$(flavor foo) |$(bar)|"

$

$ make test
undefined ||
$
$ make foo= test
recursive |123|
$


---


- pattern rules often use the percentage sign ` % ` to apply to files of
    some types with a pattern like `%.o : %.c`.

- implicit rules are builtin rules provided by the make tool itself.
    implicit rules are often pattern rules too,
    so it applies to many files of the type.

- explicit rules are written in the makefile explictily.
    it can be a pattern rule if it contains `%`, or non-pattern rule.


---


# check builtin variables in make

$ make -p | grep -E '^[A-Za-z0-9_-]+ :?=' | vi -



---
