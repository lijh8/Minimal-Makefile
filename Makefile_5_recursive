# top level recursive makefile
# parallel job execution with ` make -j `
#
# specify the dependencies of targets
# so it can work with parallel execution properly
#
# main : foo bar baz
# foo : bar


$ cat v1
libdirs = foo
maindirs = main

all : $(libdirs) $(maindirs)

main : foo

$(libdirs) :
	@$(MAKE) -C $@
	@cp $@/$@ $@/lib$@.so

$(maindirs) :
	@$(MAKE) -C $@

clean :
	@for dir in $(libdirs) $(maindirs); do \
		$(MAKE) -C $$dir $@; \
	done
.PHONY : all clean $(libdirs) $(maindirs)
$


$ cat v2
define make_soname # semver
	@$(MAKE) -C $@ soname=lib$@.so.$(firstword $(subst ., ,$(1)))
	@cp $@/$@ $@/lib$@.so.$(1)
	@( cd $@; \
	ln -f -s lib$@.so.$(1) lib$@.so.$(firstword $(subst ., ,$(1))); \
	ln -f -s lib$@.so.$(firstword $(subst ., ,$(1))) lib$@.so; )
endef

libdirs = foo
maindirs = main

all : $(libdirs) $(maindirs)
install : $(libdirs) $(maindirs)

main : foo

foo :
	$(call make_soname,1.2.3)

$(maindirs) :
	@$(MAKE) -C $@

clean :
	@for dir in $(libdirs) $(maindirs); do \
		$(MAKE) -C $$dir $@; \
	done
.PHONY : all clean install $(libdirs) $(maindirs)
$


$ cat v3
LIBDIRS  := bar foo
MAINDIRS := main1 main2

all : $(LIBDIRS) $(MAINDIRS)
foo : bar
main1 : foo
main2 : foo

$(MAINDIRS) : $(LIBDIRS)
$(LIBDIRS) :
	$(MAKE) -C $@
	cp $@/$@ $@/lib$@.so
$(MAINDIRS) :
	$(MAKE) -C $@
clean :
	for dir in $(LIBDIRS) $(MAINDIRS); do \
		$(MAKE) -C $$dir $@; \
	done
.PHONY : $(LIBDIRS) $(MAINDIRS) all clean
$


$ cat v4
SUBDIRS := bar foo main
subdirs : $(SUBDIRS)
$(SUBDIRS) :
	make -C $@
	cp $@/$@ $@/lib$@.so
clean :
	for dir in $(SUBDIRS); do \
		make -C $$dir $@; \
	done
.PHONY : $(SUBDIRS) subdirs clean

main :
	make -C $@

main : foo
foo : bar
$
