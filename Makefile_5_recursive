# top level recursive makefile
# parallel job execution with ` make -j `
#
# specify the dependencies of targets
# so it can work with parallel execution properly
#
# main : foo bar baz
# foo : bar


$ cat v1
all : main foo
main : foo

foo :
	@$(MAKE) -C $@
	@cp $@/$@ $@/lib$@.so
main :
	@$(MAKE) -C $@

clean :
	@for dir in main foo; do \
		$(MAKE) -C $$dir $@; \
	done
.PHONY : all clean main foo
$


$ cat v2
LIBDIRS  := bar foo
MAINDIRS := main1 main2

all : $(LIBDIRS) $(MAINDIRS)
foo : bar
main1 : foo
main2 : foo

$(MAINDIRS) : $(LIBDIRS)
$(LIBDIRS) :
	$(MAKE) -C $@
	cp $@/$@ $@/lib$@.so
$(MAINDIRS) :
	$(MAKE) -C $@
clean :
	for dir in $(LIBDIRS) $(MAINDIRS); do \
		$(MAKE) -C $$dir $@; \
	done
.PHONY : $(LIBDIRS) $(MAINDIRS) all clean
$


$ cat v3
SUBDIRS := bar foo main
subdirs : $(SUBDIRS)
$(SUBDIRS) :
	make -C $@
	cp $@/$@ $@/lib$@.so
clean :
	for dir in $(SUBDIRS); do \
		make -C $$dir $@; \
	done
.PHONY : $(SUBDIRS) subdirs clean

main :
	make -C $@

main : foo
foo : bar
$
